language: ko-KR

early_access: true
enable_free_tier: true
reviews:
  profile: chill
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai 요약"
  auto_title_placeholder: "@coderabbitai"
  poem: true
  review_status: true
  collapse_walkthrough: false
  path_filters:
    - "!**/swagger.json"
    - "!**/README.md"
  path_instructions:
    - path: "src/main/java/**/*.java"
      instructions: |
        # Java / Spring Code Review Guidelines (Java 21, Spring Boot 3.x)

        ## 1. General Java Best Practices

        ### Naming Conventions

        - Classes: `UpperCamelCase`
        - Methods, Variables: `lowerCamelCase`
        - Constants: `UPPER_SNAKE_CASE`

        ### Readability and Maintainability

        - Write short methods with a single responsibility (SRP).
        - Avoid deep nesting; use helper methods or design patterns.
        - Use clear and descriptive variable and method names; avoid abbreviations.
        - Avoid magic numbers or strings; define them as constants.

        ### Error Handling

        - Use specific exceptions instead of generic `Exception` or `RuntimeException`.
        - Never ignore exceptions; log or re-throw them properly.
        - Provide clear and informative error messages.

        ### Modern Java Features

        - Appropriately use `Optional` to simplify null handling.
        - Utilize Streams API for processing collections.
        - Prefer immutable objects and collections (`List.of`, Records, etc.).

        ### Concurrency

        - Address thread-safety issues involving shared mutable state.
        - Use synchronization or concurrent collections where necessary.

        ## 2. Spring Framework and Spring Boot

        ### Dependency Injection (DI)

        - Prefer constructor injection over field injection (immutability, explicitness).
        - Avoid directly injecting `ApplicationContext` unless necessary.

        ### Component Annotations

        - Use specific annotations (`@Service`, `@Repository`, `@Controller`, `@RestController`, `@Configuration`) instead of generic `@Component`.

        ### Configuration

        - Use `@ConfigurationProperties` for type-safe binding.

        ### Architecture and Layering

        - Clearly separate concerns (Controller → Service → Repository).
        - Controllers handle HTTP logic; delegate business logic to services.
        - Services manage business logic and transactions.
        - Repositories handle only data access logic.

        ### Spring Data JPA

        - Avoid complex business logic in repositories.
        - Prevent N+1 query issues (`@EntityGraph`, JOIN FETCH, etc.).
        - Use `@Transactional` mainly at the service layer.

        ### REST Controllers

        - Use DTOs to separate API and DB schema.
        - Handle errors consistently using `@ControllerAdvice`, `@ExceptionHandler`.

        ### Logging

        - Use SLF4j (Logback, Log4j2).

        ## 3. Code Formatting and Static Analysis

        - Resolve IDE and static analysis tool warnings (SonarLint, etc.).

        ## 4. Security Considerations

        - Validate external inputs (`@Valid`, `@NotNull`, etc.).
        - Prevent SQL Injection and XSS via prepared statements.
        - Use `SecureRandom` for security-sensitive operations.

        ## 5. Performance Considerations

        - Avoid unnecessary object creation or DB/API calls within loops.
        - Avoid overly complex Stream API usage.

        *When suggesting code changes, please provide specific code examples.*

    - path: "src/test/java/**/*.java"
      instructions: |
        # Java / Spring Test Code Review Rules (English)

        Please apply the following rules and best practices when reviewing test code.

        ## 1. General Rules
        - The General Java Best Practices (naming conventions, readability, etc.) applicable to `src/main/java` code apply equally to test code.
        - Use test method names that clearly indicate the test's purpose (e.g., `givenUserId_whenGetUser_thenReturnsUserDto`). Consistently use common structures like `given/when/then` or descriptive phrasing (e.g., `shouldReturnUserDtoWhenUserExists`).

        ## 2. Test Types and Strategy
        - Unit Tests:
          - Focus on testing a single class/component in isolation.
          - Replace dependencies with mock objects using a Mocking framework (e.g., Mockito).
          - Appropriately use `@ExtendWith(MockitoExtension.class)` or `@InjectMocks`, `@Mock` annotations.
        - Integration Tests:
          - Use Spring Boot's test support features (`@SpringBootTest`, `@WebMvcTest`, `@DataJpaTest`) according to the purpose.
            - `@WebMvcTest`: Use for testing the Controller layer without loading the full application context (use `@MockBean` for services, etc.).
            - `@DataJpaTest`: Use for testing the Repository layer, typically with an embedded or test database.
            - `@SpringBootTest`: Loads the full application context for testing (use only when necessary, as it can be slower).
          - Utilize `@ActiveProfiles("test")` etc., for test environment separation.
        - Test Isolation: Each test must be runnable independently and should not affect or be affected by other tests. Use `@BeforeEach`, `@AfterEach`, etc., to clean up state between tests.

        ## 3. Assertions
        - Using a fluent assertion library (e.g., AssertJ) is recommended for readability (`assertThat(result).isEqualTo(expected)`). It's more expressive than standard JUnit assertions.
        - Consider adding assertion messages to clarify what is being verified.

        ## 4. Test Quality
        - Minimize complex logic or branching within test code. Tests should be simple and easy to understand.
        - Verify that important logic paths and edge cases are sufficiently covered by tests (AI cannot measure coverage, so judge based on code).
        - Use the `@Disabled` annotation minimally and only when necessary, providing a reason. Consider removing long-term disabled tests.

        ---
        *When suggesting code changes, please provide specific code examples.*

    - path: "src/main/java/**/*Controller*.java"
      instructions: |
        # REST API (Controller) Design and URI Rules (English)

        Please focus on the following points when reviewing Controller code and API endpoint design.

        - RESTful Principles Compliance:
          - Check if the design follows resource-based (noun) URI conventions (e.g., `/users`, `/users/{userId}`). Avoid verbs in URIs (e.g., use `GET /users/{userId}` instead of `/getUser`).
          - Verify that HTTP methods (GET, POST, PUT, DELETE, PATCH) are used appropriately for their intended purpose (e.g., GET for retrieval, POST for creation, PUT for full update, PATCH for partial update, DELETE for deletion).
        - URI Naming Conventions:
          - Ensure URI path segments use lowercase letters and hyphens (`-`) for word separation (e.g., `/user-profiles/{profileId}`). Avoid underscores (`_`) or CamelCase.
          - Check that URIs do not include file extensions (e.g., `.do`, `.json`). Utilize Content Negotiation (Accept header).
        - Path Variables and Request Parameters:
          - Verify that the names of `@PathVariable`, `@RequestParam`, etc., are clear and consistent.
          - Check if required and optional parameters are handled appropriately (`required=false`, `defaultValue`, `Optional`, etc.).
        - Response Status Codes:
          - Ensure appropriate HTTP status codes are returned based on the outcome of the request processing (e.g., 200 OK for success, 201 Created for creation, 204 No Content when there's no content, 400 Bad Request for invalid requests, 401/403 for unauthorized/forbidden, 404 Not Found for missing resources, 500 Internal Server Error for server errors).
        - Request/Response DTOs:
          - Reconfirm that DTOs are used for Request Body and Response Payload. Avoid direct exposure of Entities.
          - Check the consistency of DTO field names (e.g., `camelCase`).
        - API Versioning:
          - Check if backward compatibility is considered during API changes. If necessary, verify if a versioning strategy is in place (e.g., via URI path like `/v1/users`, request headers). (Rule definition might be needed if it's an early-stage project).
        - HATEOAS (Optional):
          - Review if the response includes links to related next actions or resources, if applicable.

    - path: "build.gradle" # For Gradle projects
      instructions: |
        # Gradle build.gradle(.kts) Review Rules (English)

        Please review the `build.gradle` or `build.gradle.kts` file for the following items.

        - Dependency Management:
          - Check if dependency configurations (`implementation`, `api`, `testImplementation`, `runtimeOnly`, etc.) are used appropriately (`compile` is deprecated).
          - Verify if Gradle Version Catalog or an `ext` block is used for version management.
          - Ensure there are no unnecessary or duplicate dependencies.
          - SNAPSHOT version dependencies should only be used during development and not included in release versions.
          - Check for dependencies that might cause licensing issues (difficult for AI to judge definitively, but can be mentioned).
          - Verify that outdated library versions with known security vulnerabilities are not being used (based on version numbers, requires external tooling integration).
        - Plugins:
          - Ensure necessary Gradle plugins (e.g., `java`, `org.springframework.boot`, `io.spring.dependency-management`) are applied and configured correctly (e.g., Java version setting).
        - Repositories:
          - Check if required repositories (`mavenCentral()`, `google()`, `jcenter()` (note deprecation), etc.) are declared. Avoid unnecessary repositories for security and build stability.
        - Tasks:
          - If custom Tasks are defined, check if their logic is clear and efficient.
        - Script Readability: Ensure the Groovy or Kotlin DSL syntax is correct, and readability is maintained with proper indentation and comments.

  abort_on_close: true
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords: []
    labels: []
    drafts: false
    base_branches: []
  tools:
    shellcheck:
      enabled: true
    ruff:
      enabled: true
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      disabled_rules:
        - EN_UNPAIRED_BRACKETS
        - EN_UNPAIRED_QUOTES
      disabled_categories:
        - TYPOS
        - TYPOGRAPHY
        - CASING
      enabled_only: false
      level: default
      enabled_rules: []
      enabled_categories: []
    biome:
      enabled: true
    hadolint:
      enabled: true
    swiftlint:
      enabled: true
    phpstan:
      enabled: true
      level: default
    golangci-lint:
      enabled: true
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: true
    ast-grep:
      packages: []
      rule_dirs: []
      util_dirs: []
      essential_rules: true
chat:
  auto_reply: true
knowledge_base:
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    project_keys: []
  linear:
    team_keys: []
